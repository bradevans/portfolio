{"version":3,"sources":["CheckboxList.jsx"],"names":[],"mappings":"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","file":"CheckboxList-compiled.js","sourcesContent":["var CheckboxList = React.createClass({\n    displayName: 'CheckboxList',\n    propTypes: {\n        data: React.PropTypes.array,\n        onChange: React.PropTypes.func\n    },\n    getInitialState: function(){\n        return {\n            data: this.props.data || []\n        };\n    },\n    handleItemChange: function(e){\n        var new_data = [],\n            target = document.querySelector('#' + e.target.dataset.id),\n            checkbox_group = target.dataset.checkboxGroup,\n            checkbox_part = target.dataset.checkboxPart,\n            checked,\n            group = document.querySelector(\n                    'input[type=\"checkbox\"][data-checkbox-group=' + checkbox_part + ']') || undefined;\n\n        if(e.target.nodeName.toLowerCase() === 'span'){\n            target.checked = !target.checked;\n        }\n\n        checked = document.querySelectorAll(\n            'input[type=\"checkbox\"]:checked[data-checkbox-part=' + checkbox_part + ']').length;\n\n        if(checkbox_group){\n            target.parentNode.classList.remove('indeterminate');\n            this.handleGroupChange(checkbox_group, target.checked);\n            return;\n        } else {\n            let part_length = document\n                    .querySelectorAll('input[type=\"checkbox\"][data-checkbox-part=' + checkbox_part + ']').length;\n\n            if(group){\n                if(checked === 0){\n                    group.parentNode.classList.remove('indeterminate');\n                    group.checked = false;\n                } else if(checked < part_length){\n                    group.parentNode.classList.add('indeterminate');\n                    group.checked = true;\n                } else if(checked === part_length){\n                    group.parentNode.classList.remove('indeterminate');\n                    group.checked = true;\n                }\n            }\n        }\n\n        for(let i of this.state.data){\n            if(i.value === e.target.dataset.value){\n                i.checked = target.checked;\n            }\n\n            new_data.push(i);\n        }\n\n        if(!checkbox_group && group){\n            for(let i of this.state.data){\n                let j = 0;\n\n                if(i.checkbox_group === checkbox_part){\n                    new_data[j].checked = group.checked;\n                }\n\n                j++;\n            }\n        }\n\n        this.setState({data: new_data});\n\n        if(this.props.childEvent) {\n            this.props.childEvent(this.state);\n        }\n    },\n    handleGroupChange: function(checkbox_group, checked){\n        document.querySelector('input[type=\"checkbox\"][data-checkbox-group=' + checkbox_group + ']').checked = checked;\n        document.querySelectorAll(\n            'input[type=\"checkbox\"][data-checkbox-part=' + checkbox_group + ']').checked = checked;\n\n        var new_data = [];\n\n        for(let i of this.state.data){\n            if(i.checkbox_part === checkbox_group || i.checkbox_group === checkbox_group){\n                i.checked = checked;\n                new_data.push(i);\n            } else {\n                new_data.push(i);\n            }\n        }\n\n        this.setState({data: new_data});\n    },\n    render: function() {\n        var checkboxes,\n            checkbox_class;\n\n        checkboxes = this.state.data.map(function(i){\n\n            if(i.checkbox_part !== undefined){\n                checkbox_class = \"ml-checkbox indent \" + this.props.className;\n            } else {\n                checkbox_class = \"ml-checkbox \" + this.props.className;\n            }\n\n            return (\n                <div className={checkbox_class}>\n                    <input type=\"checkbox\"\n                           checked={i.checked ? true : false}\n                           name={i.name}\n                           id={i.id}\n                           value={i.value}\n                           data-id={i.id}\n                           data-value={i.value}\n                           data-checkall-part={i.checkall_part}\n                           data-checkbox-part={i.checkbox_part}\n                           data-checkbox-group={i.checkbox_group}\n                           onChange={this.handleItemChange}/>\n                    <label htmlFor={i.id} />\n                    <span className=\"fake-label\"\n                          data-id={i.id}\n                          data-value={i.value}\n                          data-checkbox-part={i.checkbox_part}\n                          data-checkbox-group={i.checkbox_group}\n                          onClick={this.handleItemChange}>\n                        {i.label}\n                    </span>\n                </div>\n            );\n        }.bind(this));\n\n        //console.log('state: ', this.state);\n\n        return (<div>{checkboxes}</div>);\n\t}\n});\n\nmodule.exports = CheckboxList;\n"]}